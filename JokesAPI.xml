<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JokesAPI</name>
    </assembly>
    <members>
        <member name="M:JokesAPI.Controllers.JokesController.GetJokeItems">
            <summary>
            GetJokeItems returns all jokes in the database.
            </summary>
            <remarks>This returns all jokes. This is fine while the database is small.
            Consider using PageJokes as the data grow to maximize client responsiveness for the user</remarks>
            <returns>A list of Jokes</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.GetJokeItem(System.Nullable{System.Int64})">
            <summary>
            GetJokeItem returns a specific joke associated with the supplied id
            </summary>
            <param name="id">Id of a joke in the Jokes database</param>
            <returns>StatusCodes.Status200OK if the joke is found, NotFound if the Joke does not exist, BadRequest on exception</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.PutJokeItem(System.Nullable{System.Int64},JokesAPI.Models.JokeItem)">
            <summary>
            PutJokeItem allows the client to modify an existing Joke
            </summary>
            <param name="id">Id of the joke in the Jokes table</param>
            <param name="jokeItem">A JokeItem object</param>
            <returns>StatusCodes.Status200OK (success), BadRequest (bad data or exception), or NotFound (if the Id does not exist)</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.PostJokeItem(JokesAPI.Models.JokeItem)">
            <summary>
            PostJokeItem allows the user to add jokes to the Jokes Database
            </summary>
            <param name="jokeItem">JSON Representing a JokeItem Model</param>
            <returns>Success = StatusCodes.Status200OK or BadRequest if unsuccessful</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.DeleteJokeItem(System.Nullable{System.Int64})">
            <summary>
            DeleteJokeItem provides the ability to delete a joke from the datbase.
            </summary>
            <param name="id">Id of the Joke in the Jokes table</param>
            <returns>If successfully deleted this method returns StatusCodes.Status200OK. 
            Otherwise it returns a BadRequest status code.</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.PagingJoke(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            PagingJoke provides a mechanism for paging through the span of jokes.
            </summary>
            <param name="pageNumber">Defines wich page number as the start</param>
            <param name="pageSize">Defines how many items appear on a page</param>
            <returns>A specified number of jokes on the requested page</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.SearchJokes(System.String)">
            <summary>
            SearchJokes provides the ability to search for jokes that 'contain' the search text.
            Future Plans: Extend this to look for 'StartsWith', 'Contains', or 'EndsWidth'.
            </summary>
            <param name="text">The text you are searching for in the jokes database.</param>
            <returns>Any joke that 'Contains" the search text value</returns>
        </member>
        <member name="M:JokesAPI.Controllers.JokesController.Random">
            <summary>
            The Random API returns a random joke from the Jokes Database.
            </summary>
            <returns>A single joke from the jokes database</returns>
        </member>
    </members>
</doc>
